{"ast":null,"code":"var _jsxFileName = \"/Users/sph/Downloads/StadStrandReactFrontEnd/src/AppComponents/MapContainer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport { GoogleMap, Marker, DirectionsRenderer } from \"@react-google-maps/api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst MapContainer = props => {\n  _s();\n\n  const [directions, setDirections] = useState(null);\n  const [error, setError] = useState(null);\n  const [currentLocation, setCurrentLocation] = useState();\n\n  const onMapLoad = map => {\n    var _navigator;\n\n    (_navigator = navigator) === null || _navigator === void 0 ? void 0 : _navigator.geolocation.getCurrentPosition(({\n      coords: {\n        latitude: lat,\n        longitude: lng\n      }\n    }) => {\n      const pos = {\n        lat,\n        lng\n      };\n      setCurrentLocation(pos);\n    });\n  };\n\n  const calculateRoute = useCallback(async () => {\n    // eslint-disable-next-line no-undef\n    const directionsService = new google.maps.DirectionsService();\n    const result = await directionsService.route({\n      origin: currentLocation,\n      destination: {\n        lat: (currentLocation === null || currentLocation === void 0 ? void 0 : currentLocation.lat) + 0.2,\n        lng: (currentLocation === null || currentLocation === void 0 ? void 0 : currentLocation.lng) + 0.2\n      },\n      // eslint-disable-next-line no-undef\n      travelMode: google.maps.TravelMode.WALKING\n    });\n    setDirections(result);\n  }, []);\n  useEffect(() => {\n    if (!props.showRoute) return;\n    calculateRoute();\n  }, [props.showRoute]); // const currentLocation = {\n  //   lat: props.lat ?? 10,\n  //   lng: props.log ?? 10,\n  // };\n  // const newLocation = {\n  //   lat: props.lat ?? 13,\n  //   lng: props.log ?? 13.5,\n  // };\n  // const locations = [\n  //     {\n  //       name: props.address,\n  //       location: {\n  //         lat: props.lat,\n  //         lng: props.log\n  //       },\n  //     },\n  //   ];\n  // if (true) return <DirectionsRenderer mapContainerStyle={mapStyles} zoom={10} center={currentLocation} directions={directions} />\n\n  return /*#__PURE__*/_jsxDEV(GoogleMap, {\n    onLoad: onMapLoad,\n    mapContainerStyle: mapStyles,\n    directions: directions,\n    zoom: 10,\n    center: currentLocation,\n    children: /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Marker, {\n        position: currentLocation\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Marker, {\n        position: directions\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 11\n      }, this), !props.showRoute && /*#__PURE__*/_jsxDEV(Marker, {\n        position: directions\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 32\n      }, this), props.showRoute && /*#__PURE__*/_jsxDEV(DirectionsRenderer, {\n        directions: directions\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 31\n      }, this)]\n    }, void 0, true) // locations.map(item => {\n    // return (\n    // <Marker key={item.name} position={item.location} />\n    // )\n    // })\n\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n};\n\n_s(MapContainer, \"CQwnfBdlNfHymn5R+vCk2zmEJmg=\");\n\n_c = MapContainer;\nconst mapStyles = {\n  height: \"300px\",\n  width: \"100%\"\n};\nexport default MapContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"MapContainer\");","map":{"version":3,"sources":["/Users/sph/Downloads/StadStrandReactFrontEnd/src/AppComponents/MapContainer.js"],"names":["React","useCallback","useEffect","useState","GoogleMap","Marker","DirectionsRenderer","MapContainer","props","directions","setDirections","error","setError","currentLocation","setCurrentLocation","onMapLoad","map","navigator","geolocation","getCurrentPosition","coords","latitude","lat","longitude","lng","pos","calculateRoute","directionsService","google","maps","DirectionsService","result","route","origin","destination","travelMode","TravelMode","WALKING","showRoute","mapStyles","height","width"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useState } from \"react\";\nimport { GoogleMap, Marker, DirectionsRenderer } from \"@react-google-maps/api\";\n\nconst MapContainer = (props) => {\n  const [directions, setDirections] = useState(null);\n  const [error, setError] = useState(null);\n  const [currentLocation, setCurrentLocation] = useState();\n\n  const onMapLoad = (map) => {\n    navigator?.geolocation.getCurrentPosition(\n      ({ coords: { latitude: lat, longitude: lng } }) => {\n        const pos = { lat, lng };\n        setCurrentLocation(pos);\n      }\n    );\n  };\n\n  const calculateRoute = useCallback(async () => {\n    // eslint-disable-next-line no-undef\n    const directionsService = new google.maps.DirectionsService();\n    const result = await directionsService.route({\n      origin: currentLocation,\n      destination: {\n        lat: currentLocation?.lat + 0.2,\n        lng: currentLocation?.lng + 0.2,\n      },\n      // eslint-disable-next-line no-undef\n      travelMode: google.maps.TravelMode.WALKING,\n    });\n    setDirections(result);\n  },[]);\n\n  useEffect(() => {\n    if (!props.showRoute) return;\n    calculateRoute();\n  }, [props.showRoute]);\n\n  // const currentLocation = {\n  //   lat: props.lat ?? 10,\n  //   lng: props.log ?? 10,\n  // };\n\n  // const newLocation = {\n  //   lat: props.lat ?? 13,\n  //   lng: props.log ?? 13.5,\n  // };\n\n  // const locations = [\n  //     {\n  //       name: props.address,\n  //       location: {\n  //         lat: props.lat,\n  //         lng: props.log\n  //       },\n  //     },\n  //   ];\n\n  // if (true) return <DirectionsRenderer mapContainerStyle={mapStyles} zoom={10} center={currentLocation} directions={directions} />\n  return (\n    <GoogleMap\n      onLoad={onMapLoad}\n      mapContainerStyle={mapStyles}\n      directions={directions}\n      zoom={10}\n      center={currentLocation}\n    >\n      {\n        <>\n          <Marker position={currentLocation} />\n          <Marker position={directions} />\n          {!props.showRoute && <Marker position={directions} />}\n          {props.showRoute && <DirectionsRenderer directions={directions} />}\n          {/* <Marker position={currentLocation} /> */}\n        </>\n        // locations.map(item => {\n        // return (\n        // <Marker key={item.name} position={item.location} />\n        // )\n        // })\n      }\n    </GoogleMap>\n  );\n};\n\nconst mapStyles = {\n  height: \"300px\",\n  width: \"100%\",\n};\n\nexport default MapContainer;\n"]},"metadata":{},"sourceType":"module"}